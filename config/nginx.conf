user nginx;
worker_processes 1;

error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
}

tcp {
    upstream websocket_frontends {
        server 127.0.0.1:9090;
    
        check interval=3000 rise=2 fall=5 timeout=1000;
    }

    server {
        listen 81;
        server_name websockets.notesaround.com;

        tcp_nodelay on;
        proxy_pass websocket_frontends;
    }
}

http {
    # Enumerate all the Tornado servers here
    upstream api_frontends {
        server 127.0.0.1:8080;
    }

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;

    keepalive_timeout 65;
    proxy_read_timeout 200;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    gzip on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types text/plain text/html text/css text/xml
               application/x-javascript application/xml
               application/atom+xml text/javascript;

    # Only retry if there was a communication error, not a timeout
    # on the Tornado server (to avoid propagating "queries of death"
    # to all frontends)
    proxy_next_upstream error;

    server {
        listen 80;
	server_name notesaround.com

        # Allow file uploads
        client_max_body_size 50M;

        location / {
            root /srv/notesaround/www/;
            if ($query_string) {
                expires max;
            }
        }

#        location /ws {
#            proxy_pass_header Server;
#            proxy_set_header Host $http_host;
#            proxy_redirect off;
#            proxy_set_header X-Real-IP $remote_addr;
#            proxy_set_header X-Scheme $scheme;
#            proxy_pass http://websocket_frontends/ws;
#        }

        location /api {
            proxy_pass_header Server;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_pass http://api_frontends/api;
        }
    }
}
